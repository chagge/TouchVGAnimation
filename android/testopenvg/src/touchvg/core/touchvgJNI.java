/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package touchvg.core;

public class touchvgJNI {
  public final static native long new_TestOpenVGCanvas(int jarg1, int jarg2, int jarg3);
  public final static native void delete_TestOpenVGCanvas(long jarg1);
  public final static native void TestOpenVGCanvas_resize(long jarg1, TestOpenVGCanvas jarg1_, int jarg2, int jarg3);
  public final static native int TestOpenVGCanvas_getWidth(long jarg1, TestOpenVGCanvas jarg1_);
  public final static native int TestOpenVGCanvas_getHeight(long jarg1, TestOpenVGCanvas jarg1_);
  public final static native void TestOpenVGCanvas_prepareToDraw(long jarg1, TestOpenVGCanvas jarg1_, boolean jarg2, int jarg3);
  public final static native void TestOpenVGCanvas_draw__SWIG_0(long jarg1, TestOpenVGCanvas jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native void TestOpenVGCanvas_draw__SWIG_1(long jarg1, TestOpenVGCanvas jarg1_, int jarg2, int jarg3);
  public final static native void TestOpenVGCanvas_dyndraw(long jarg1, TestOpenVGCanvas jarg1_, float jarg2, float jarg3);
  public final static native long TestOpenVGCanvas_beginPaint(long jarg1, TestOpenVGCanvas jarg1_, boolean jarg2);
  public final static native void TestOpenVGCanvas_endPaint(long jarg1, TestOpenVGCanvas jarg1_);
  public final static native long Tol_gTol();
  public final static native long Tol_minTol();
  public final static native long new_Tol__SWIG_0();
  public final static native long new_Tol__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Tol__SWIG_2(float jarg1);
  public final static native float Tol_equalPoint(long jarg1, Tol jarg1_);
  public final static native float Tol_equalVector(long jarg1, Tol jarg1_);
  public final static native void Tol_setEqualPoint(long jarg1, Tol jarg1_, float jarg2);
  public final static native void Tol_setEqualVector(long jarg1, Tol jarg1_, float jarg2);
  public final static native void delete_Tol(long jarg1);
  public final static native void Vector2d_x_set(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native float Vector2d_x_get(long jarg1, Vector2d jarg1_);
  public final static native void Vector2d_y_set(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native float Vector2d_y_get(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_kIdentity();
  public final static native long Vector2d_kXAxis();
  public final static native long Vector2d_kYAxis();
  public final static native long new_Vector2d__SWIG_0();
  public final static native long new_Vector2d__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Vector2d__SWIG_2(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_transform(long jarg1, Vector2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Vector2d_add(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Vector2d_subtract(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Vector2d_negate(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_perpVector(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_scaleBy__SWIG_0(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native long Vector2d_scaleBy__SWIG_1(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native float Vector2d_dotProduct(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_crossProduct(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_angle(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_angle2(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_angleTo(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_angleTo2(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_length(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_lengthSqrd(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_unitVector(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_normalize__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_normalize__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isUnitVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_isUnitVector__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isZeroVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_isZeroVector__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isEqualTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isEqualTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Vector2d_set(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native long Vector2d_setAngleLength(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native long Vector2d_setLength(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native boolean Vector2d_isRightOf(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isLeftOf(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isParallelTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isParallelTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isCodirectionalTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isCodirectionalTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isOppositeTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isOppositeTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isPerpendicularTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isPerpendicularTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_distanceToVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_projectScaleToVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_projectResolveVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Vector2d jarg4_);
  public final static native boolean Vector2d_resolveVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Vector2d jarg4_);
  public final static native boolean Vector2d_resolveVector__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_);
  public final static native void delete_Vector2d(long jarg1);
  public final static native void Point2d_x_set(long jarg1, Point2d jarg1_, float jarg2);
  public final static native float Point2d_x_get(long jarg1, Point2d jarg1_);
  public final static native void Point2d_y_set(long jarg1, Point2d jarg1_, float jarg2);
  public final static native float Point2d_y_get(long jarg1, Point2d jarg1_);
  public final static native long Point2d_kOrigin();
  public final static native long new_Point2d__SWIG_0();
  public final static native long new_Point2d__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Point2d__SWIG_2(long jarg1, Point2d jarg1_);
  public final static native long Point2d_transform(long jarg1, Point2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Point2d_scaleBy__SWIG_0(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_scaleBy__SWIG_1(long jarg1, Point2d jarg1_, float jarg2);
  public final static native void Point2d_offset__SWIG_0(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native void Point2d_offset__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Point2d_add(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Point2d_subtract__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Point2d_subtract__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Point2d_negate(long jarg1, Point2d jarg1_);
  public final static native long Point2d_asVector(long jarg1, Point2d jarg1_);
  public final static native float Point2d_length(long jarg1, Point2d jarg1_);
  public final static native float Point2d_distanceTo(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native float Point2d_distanceSquare(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean Point2d_isEqualTo__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Point2d_isEqualTo__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Point2d_set(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_polarPoint(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_rulerPoint__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, float jarg3);
  public final static native long Point2d_rulerPoint__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4);
  public final static native void delete_Point2d(long jarg1);
  public final static native void Matrix2d_m11_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m11_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m12_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m12_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m21_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m21_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m22_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m22_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_dx_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_dx_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_dy_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_dy_get(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_kIdentity();
  public final static native long new_Matrix2d__SWIG_0();
  public final static native long new_Matrix2d__SWIG_1(long jarg1, Matrix2d jarg1_);
  public final static native long new_Matrix2d__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native long new_Matrix2d__SWIG_3(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_preMultBy(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Matrix2d_postMultBy(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Matrix2d_setToProduct(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_, long jarg3, Matrix2d jarg3_);
  public final static native void Matrix2d_TransformPoints(long jarg1, Matrix2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native void Matrix2d_TransformVectors(long jarg1, Matrix2d jarg1_, int jarg2, long jarg3, Vector2d jarg3_);
  public final static native float Matrix2d_det(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_invert(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_inverse(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isInvertible(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scale(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scaleX(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scaleY(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_angle(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isEqualTo__SWIG_0(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Matrix2d_isEqualTo__SWIG_1(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native boolean Matrix2d_isIdentity(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isOrtho(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_hasMirror(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_setCoordSystem(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native void Matrix2d_getCoordSystem(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_coordSystem__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_coordSystem__SWIG_1(long jarg1, Point2d jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native long Matrix2d_coordSystem__SWIG_2(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_coordSystem__SWIG_3(long jarg1, Point2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToIdentity(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_set(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native long Matrix2d_setToTranslation(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_setToRotation__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_setToRotation__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToScaling__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_setToScaling__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToScaling__SWIG_2(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_setToScaling__SWIG_3(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_setToMirroring__SWIG_0(long jarg1, Matrix2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_setToMirroring__SWIG_1(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_setToMirroring__SWIG_2(long jarg1, Matrix2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_);
  public final static native long Matrix2d_setToShearing__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_setToShearing__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_translation(long jarg1, Vector2d jarg1_);
  public final static native long Matrix2d_rotation__SWIG_0(float jarg1, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_rotation__SWIG_1(float jarg1);
  public final static native long Matrix2d_scaling__SWIG_0(float jarg1, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_scaling__SWIG_1(float jarg1);
  public final static native long Matrix2d_scaling__SWIG_2(float jarg1, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_scaling__SWIG_3(float jarg1, float jarg2);
  public final static native long Matrix2d_mirroring__SWIG_0(long jarg1, Point2d jarg1_);
  public final static native long Matrix2d_mirroring__SWIG_1();
  public final static native long Matrix2d_mirroring__SWIG_2(long jarg1, Point2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_shearing__SWIG_0(float jarg1, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_shearing__SWIG_1(float jarg1, float jarg2);
  public final static native void delete_Matrix2d(long jarg1);
  public final static native void RECT_2D_left_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_left_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_top_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_top_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_right_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_right_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_bottom_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_bottom_get(long jarg1, RECT_2D jarg1_);
  public final static native long new_RECT_2D();
  public final static native float RECT_2D_width(long jarg1, RECT_2D jarg1_);
  public final static native float RECT_2D_height(long jarg1, RECT_2D jarg1_);
  public final static native void delete_RECT_2D(long jarg1);
  public final static native void Box2d_xmin_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_xmin_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_ymin_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_ymin_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_xmax_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_xmax_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_ymax_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_ymax_get(long jarg1, Box2d jarg1_);
  public final static native long Box2d_kIdentity();
  public final static native long new_Box2d__SWIG_0();
  public final static native long new_Box2d__SWIG_1(long jarg1, Box2d jarg1_, boolean jarg2);
  public final static native long new_Box2d__SWIG_2(long jarg1, Box2d jarg1_);
  public final static native long new_Box2d__SWIG_3(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long new_Box2d__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4, boolean jarg5);
  public final static native long new_Box2d__SWIG_5(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_Box2d__SWIG_6(long jarg1, RECT_2D jarg1_, boolean jarg2);
  public final static native long new_Box2d__SWIG_7(long jarg1, RECT_2D jarg1_);
  public final static native long new_Box2d__SWIG_8(int jarg1, int jarg2, int jarg3, int jarg4, boolean jarg5);
  public final static native long new_Box2d__SWIG_9(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_Box2d__SWIG_10(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native long new_Box2d__SWIG_11(int jarg1, long jarg2, Point2d jarg2_);
  public final static native long new_Box2d__SWIG_12(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long new_Box2d__SWIG_13(float jarg1, float jarg2);
  public final static native void Box2d_get__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Box2d_get__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native long Box2d_set__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, boolean jarg3);
  public final static native long Box2d_set__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_set__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Box2d_set__SWIG_3(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_set__SWIG_4(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_);
  public final static native long Box2d_set__SWIG_5(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native long Box2d_set__SWIG_6(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4);
  public final static native float Box2d_width(long jarg1, Box2d jarg1_);
  public final static native float Box2d_height(long jarg1, Box2d jarg1_);
  public final static native long Box2d_size(long jarg1, Box2d jarg1_);
  public final static native long Box2d_center(long jarg1, Box2d jarg1_);
  public final static native long Box2d_leftTop(long jarg1, Box2d jarg1_);
  public final static native long Box2d_rightTop(long jarg1, Box2d jarg1_);
  public final static native long Box2d_leftBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_rightBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_normalize(long jarg1, Box2d jarg1_);
  public final static native long Box2d_swapTopBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_empty(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isNormalized(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isNull(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isEmpty__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Tol jarg2_, boolean jarg3);
  public final static native boolean Box2d_isEmpty__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Box2d_isEmpty__SWIG_2(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isEmptyMinus__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Box2d_isEmptyMinus__SWIG_1(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_contains__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean Box2d_contains__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Box2d_contains__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean Box2d_contains__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Tol jarg3_);
  public final static native long Box2d_inflate__SWIG_0(long jarg1, Box2d jarg1_, float jarg2);
  public final static native long Box2d_inflate__SWIG_1(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_inflate__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_inflate__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_inflate__SWIG_4(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_deflate__SWIG_0(long jarg1, Box2d jarg1_, float jarg2);
  public final static native long Box2d_deflate__SWIG_1(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_deflate__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_deflate__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_deflate__SWIG_4(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_offset__SWIG_0(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_offset__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_scaleBy__SWIG_0(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_scaleBy__SWIG_1(long jarg1, Box2d jarg1_, float jarg2);
  public final static native boolean Box2d_isIntersect(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_intersectWith__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Box2d jarg3_);
  public final static native long Box2d_intersectWith__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_unionWith__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Box2d jarg3_);
  public final static native long Box2d_unionWith__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_unionWith__SWIG_2(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_unionWith__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Box2d_offset__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean Box2d_isEqualTo__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Box2d_isEqualTo__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native void delete_Box2d(long jarg1);
  public final static native long new_GiTransform__SWIG_0(boolean jarg1);
  public final static native long new_GiTransform__SWIG_1();
  public final static native long new_GiTransform__SWIG_2(long jarg1, GiTransform jarg1_);
  public final static native void delete_GiTransform(long jarg1);
  public final static native long GiTransform_copy(long jarg1, GiTransform jarg1_, long jarg2, GiTransform jarg2_);
  public final static native float GiTransform_getDpiX(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getDpiY(long jarg1, GiTransform jarg1_);
  public final static native int GiTransform_getWidth(long jarg1, GiTransform jarg1_);
  public final static native int GiTransform_getHeight(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getCenterW(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getViewScale(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getWorldToDisplayX__SWIG_0(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getWorldToDisplayX__SWIG_1(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getWorldToDisplayY__SWIG_0(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getWorldToDisplayY__SWIG_1(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_displayToModel__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, boolean jarg3);
  public final static native float GiTransform_displayToModel__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native long GiTransform_modelToWorld(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_worldToModel(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_displayToWorld(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_worldToDisplay(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_displayToModel__SWIG_2(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_modelToDisplay(long jarg1, GiTransform jarg1_);
  public final static native boolean GiTransform_setWndSize(long jarg1, GiTransform jarg1_, int jarg2, int jarg3);
  public final static native void GiTransform_setResolution__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native void GiTransform_setResolution__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native void GiTransform_setModelTransform(long jarg1, GiTransform jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long GiTransform_getWndRectW(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getWndRectM(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getMinViewScale(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getMaxViewScale(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getWorldLimits(long jarg1, GiTransform jarg1_);
  public final static native void GiTransform_setViewScaleRange(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native long GiTransform_setWorldLimits(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean GiTransform_zoomWnd__SWIG_0(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomWnd__SWIG_1(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_0(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_, long jarg3, RECT_2D jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomTo__SWIG_1(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_, long jarg3, RECT_2D jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_2(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean GiTransform_zoomTo__SWIG_3(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomTo__SWIG_4(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_5(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean GiTransform_zoomPan__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, float jarg3, boolean jarg4);
  public final static native boolean GiTransform_zoomPan__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native boolean GiTransform_zoomByFactor__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomByFactor__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomByFactor__SWIG_2(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native boolean GiTransform_zoomScale__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomScale__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomScale__SWIG_2(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native boolean GiTransform_zoom(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, float jarg3);
  public final static native boolean GiTransform_enableZoom(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getZoomValue(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_);
  public final static native int GiTransform_getZoomTimes(long jarg1, GiTransform jarg1_);
  public final static native long new_GiSaveModelTransform(long jarg1, GiTransform jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void delete_GiSaveModelTransform(long jarg1);
  public final static native int kGiCloseFigure_get();
  public final static native int kGiLineTo_get();
  public final static native int kGiBeziersTo_get();
  public final static native int kGiMoveTo_get();
  public final static native long new_GiPath__SWIG_0();
  public final static native long new_GiPath__SWIG_1(long jarg1, GiPath jarg1_);
  public final static native long new_GiPath__SWIG_2(int jarg1, long jarg2, Point2d jarg2_, String jarg3);
  public final static native void delete_GiPath(long jarg1);
  public final static native long GiPath_copy(long jarg1, GiPath jarg1_, long jarg2, GiPath jarg2_);
  public final static native boolean GiPath_genericRoundLines__SWIG_0(long jarg1, GiPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4, boolean jarg5);
  public final static native boolean GiPath_genericRoundLines__SWIG_1(long jarg1, GiPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native int GiPath_getCount(long jarg1, GiPath jarg1_);
  public final static native long GiPath_getPoints(long jarg1, GiPath jarg1_);
  public final static native String GiPath_getTypes(long jarg1, GiPath jarg1_);
  public final static native void GiPath_clear(long jarg1, GiPath jarg1_);
  public final static native void GiPath_transform(long jarg1, GiPath jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void GiPath_startFigure(long jarg1, GiPath jarg1_);
  public final static native boolean GiPath_moveTo(long jarg1, GiPath jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean GiPath_lineTo(long jarg1, GiPath jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean GiPath_linesTo(long jarg1, GiPath jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean GiPath_beziersTo__SWIG_0(long jarg1, GiPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiPath_beziersTo__SWIG_1(long jarg1, GiPath jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean GiPath_arcTo__SWIG_0(long jarg1, GiPath jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean GiPath_arcTo__SWIG_1(long jarg1, GiPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean GiPath_closeFigure(long jarg1, GiPath jarg1_);
  public final static native void GiColor_r_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_r_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_g_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_g_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_b_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_b_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_a_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_a_get(long jarg1, GiColor jarg1_);
  public final static native long new_GiColor__SWIG_0();
  public final static native long new_GiColor__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_GiColor__SWIG_2(int jarg1, int jarg2, int jarg3);
  public final static native long new_GiColor__SWIG_3(long jarg1, GiColor jarg1_);
  public final static native long new_GiColor__SWIG_4(int jarg1, boolean jarg2);
  public final static native long new_GiColor__SWIG_5(int jarg1);
  public final static native long GiColor_White();
  public final static native long GiColor_Black();
  public final static native long GiColor_Invalid();
  public final static native int GiColor_getARGB(long jarg1, GiColor jarg1_);
  public final static native void GiColor_setARGB(long jarg1, GiColor jarg1_, int jarg2);
  public final static native void GiColor_set__SWIG_0(long jarg1, GiColor jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void GiColor_set__SWIG_1(long jarg1, GiColor jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean GiColor_isInvalid(long jarg1, GiColor jarg1_);
  public final static native boolean GiColor_equals(long jarg1, GiColor jarg1_, long jarg2, GiColor jarg2_);
  public final static native void delete_GiColor(long jarg1);
  public final static native int kGiLineSolid_get();
  public final static native int kContextCopyNone_get();
  public final static native int kContextLineRGB_get();
  public final static native int kContextLineAlpha_get();
  public final static native int kContextLineARGB_get();
  public final static native int kContextLineWidth_get();
  public final static native int kContextLineStyle_get();
  public final static native int kContextFillRGB_get();
  public final static native int kContextFillAlpha_get();
  public final static native int kContextFillARGB_get();
  public final static native int kContextCopyAll_get();
  public final static native long new_GiContext__SWIG_0();
  public final static native long new_GiContext__SWIG_1(float jarg1, long jarg2, GiColor jarg2_, int jarg3, long jarg4, GiColor jarg4_, boolean jarg5);
  public final static native long new_GiContext__SWIG_2(float jarg1, long jarg2, GiColor jarg2_, int jarg3, long jarg4, GiColor jarg4_);
  public final static native long new_GiContext__SWIG_3(float jarg1, long jarg2, GiColor jarg2_, int jarg3);
  public final static native long new_GiContext__SWIG_4(float jarg1, long jarg2, GiColor jarg2_);
  public final static native long new_GiContext__SWIG_5(float jarg1);
  public final static native long new_GiContext__SWIG_6(long jarg1, GiContext jarg1_);
  public final static native long GiContext_copy__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_, int jarg3);
  public final static native long GiContext_copy__SWIG_1(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_);
  public final static native boolean GiContext_equals(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_);
  public final static native int GiContext_getLineStyle(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineStyle(long jarg1, GiContext jarg1_, int jarg2);
  public final static native float GiContext_getLineWidth(long jarg1, GiContext jarg1_);
  public final static native boolean GiContext_isAutoScale(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineWidth(long jarg1, GiContext jarg1_, float jarg2, boolean jarg3);
  public final static native boolean GiContext_isNullLine(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setNullLine(long jarg1, GiContext jarg1_);
  public final static native long GiContext_getLineColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineColor__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiColor jarg2_);
  public final static native void GiContext_setLineColor__SWIG_1(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void GiContext_setLineColor__SWIG_2(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native int GiContext_getLineARGB(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineARGB(long jarg1, GiContext jarg1_, int jarg2);
  public final static native int GiContext_getLineAlpha(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineAlpha(long jarg1, GiContext jarg1_, int jarg2);
  public final static native boolean GiContext_hasFillColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setNoFillColor(long jarg1, GiContext jarg1_);
  public final static native long GiContext_getFillColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillColor__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiColor jarg2_);
  public final static native void GiContext_setFillColor__SWIG_1(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void GiContext_setFillColor__SWIG_2(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native int GiContext_getFillARGB(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillARGB(long jarg1, GiContext jarg1_, int jarg2);
  public final static native int GiContext_getFillAlpha(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillAlpha(long jarg1, GiContext jarg1_, int jarg2);
  public final static native boolean GiContext_isAutoFillColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setAutoFillColor(long jarg1, GiContext jarg1_, boolean jarg2);
  public final static native int GiContext_getType(long jarg1, GiContext jarg1_);
  public final static native void delete_GiContext(long jarg1);
  public final static native long new_GiGraphics__SWIG_0(long jarg1, GiTransform jarg1_);
  public final static native long new_GiGraphics__SWIG_1(long jarg1, GiGraphics jarg1_);
  public final static native void delete_GiGraphics(long jarg1);
  public final static native void GiGraphics_copy(long jarg1, GiGraphics jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native long GiGraphics_xf(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_isDrawing(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_isPrint(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_isStopping(long jarg1, GiGraphics jarg1_);
  public final static native void GiGraphics_stopDrawing(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipModel(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipWorld(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipBox(long jarg1, GiGraphics jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native boolean GiGraphics_setClipBox(long jarg1, GiGraphics jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native boolean GiGraphics_setClipWorld(long jarg1, GiGraphics jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean GiGraphics_isGrayMode(long jarg1, GiGraphics jarg1_);
  public final static native void GiGraphics_setGrayMode(long jarg1, GiGraphics jarg1_, boolean jarg2);
  public final static native long GiGraphics_getBkColor(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_setBkColor(long jarg1, GiGraphics jarg1_, long jarg2, GiColor jarg2_);
  public final static native long GiGraphics_calcPenColor(long jarg1, GiGraphics jarg1_, long jarg2, GiColor jarg2_);
  public final static native float GiGraphics_calcPenWidth(long jarg1, GiGraphics jarg1_, float jarg2, boolean jarg3);
  public final static native void GiGraphics_setMaxPenWidth__SWIG_0(long jarg1, GiGraphics jarg1_, float jarg2, float jarg3);
  public final static native void GiGraphics_setMaxPenWidth__SWIG_1(long jarg1, GiGraphics jarg1_, float jarg2);
  public final static native boolean GiGraphics_drawLine__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawLine__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawLines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawLines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawBeziers__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawBeziers__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawBeziers__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawArc__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native boolean GiGraphics_drawArc__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiGraphics_drawArc3P__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawArc3P__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_);
  public final static native boolean GiGraphics_drawPolygon__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawPolygon__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawEllipse__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawEllipse__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5);
  public final static native boolean GiGraphics_drawEllipse__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean GiGraphics_drawEllipse__SWIG_3(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, boolean jarg4);
  public final static native boolean GiGraphics_drawEllipse__SWIG_4(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_);
  public final static native boolean GiGraphics_drawPie__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native boolean GiGraphics_drawPie__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiGraphics_drawRect__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, boolean jarg4);
  public final static native boolean GiGraphics_drawRect__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4, float jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4, float jarg5);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4);
  public final static native boolean GiGraphics_drawSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_);
  public final static native boolean GiGraphics_drawClosedSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawClosedSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_);
  public final static native boolean GiGraphics_drawBSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawBSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawClosedBSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawClosedBSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawQuadSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawQuadSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawPath__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, GiPath jarg3_, boolean jarg4, boolean jarg5);
  public final static native boolean GiGraphics_drawPath__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, GiPath jarg3_, boolean jarg4);
  public final static native boolean GiGraphics_drawHandle__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, Point2d jarg2_, int jarg3, boolean jarg4);
  public final static native boolean GiGraphics_drawHandle__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, Point2d jarg2_, int jarg3);
  public final static native boolean GiGraphics_beginPaint__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiCanvas jarg2_, long jarg3, RECT_2D jarg3_);
  public final static native boolean GiGraphics_beginPaint__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiCanvas jarg2_);
  public final static native void GiGraphics_endPaint(long jarg1, GiGraphics jarg1_);
  public final static native long new_GiSaveClipBox(long jarg1, GiGraphics jarg1_, long jarg2, Box2d jarg2_);
  public final static native void delete_GiSaveClipBox(long jarg1);
  public final static native boolean GiSaveClipBox_succeed(long jarg1, GiSaveClipBox jarg1_);
  public final static native void delete_GiCanvas(long jarg1);
  public final static native void GiCanvas_setPen(long jarg1, GiCanvas jarg1_, int jarg2, float jarg3, int jarg4, float jarg5);
  public final static native void GiCanvas_setBrush(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3);
  public final static native void GiCanvas_clearRect(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvas_drawRect(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, boolean jarg6, boolean jarg7);
  public final static native void GiCanvas_drawLine(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvas_drawEllipse(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, boolean jarg6, boolean jarg7);
  public final static native void GiCanvas_beginPath(long jarg1, GiCanvas jarg1_);
  public final static native void GiCanvas_moveTo(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3);
  public final static native void GiCanvas_lineTo(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3);
  public final static native void GiCanvas_bezierTo(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void GiCanvas_quadTo(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvas_closePath(long jarg1, GiCanvas jarg1_);
  public final static native void GiCanvas_drawPath(long jarg1, GiCanvas jarg1_, boolean jarg2, boolean jarg3);
  public final static native void GiCanvas_saveClip(long jarg1, GiCanvas jarg1_);
  public final static native void GiCanvas_restoreClip(long jarg1, GiCanvas jarg1_);
  public final static native boolean GiCanvas_clipRect(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean GiCanvas_clipPath(long jarg1, GiCanvas jarg1_);
  public final static native void GiCanvas_drawHandle(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, int jarg4);
  public final static native void GiCanvas_drawBitmap(long jarg1, GiCanvas jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native float GiCanvas_drawTextAt(long jarg1, GiCanvas jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, int jarg6);
  public final static native boolean GiCanvas_beginShape(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7, float jarg8);
  public final static native void GiCanvas_endShape(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3, float jarg4, float jarg5);
  public final static native long MgObject_clone(long jarg1, MgObject jarg1_);
  public final static native void MgObject_copy(long jarg1, MgObject jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgObject_release(long jarg1, MgObject jarg1_);
  public final static native void MgObject_addRef(long jarg1, MgObject jarg1_);
  public final static native boolean MgObject_equals(long jarg1, MgObject jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgObject_getType(long jarg1, MgObject jarg1_);
  public final static native boolean MgObject_isKindOf(long jarg1, MgObject jarg1_, int jarg2);
  public final static native int MgShape_Type();
  public final static native long MgShape_cloneShape(long jarg1, MgShape jarg1_);
  public final static native long MgShape_context(long jarg1, MgShape jarg1_);
  public final static native long MgShape_contextc(long jarg1, MgShape jarg1_);
  public final static native long MgShape_shape(long jarg1, MgShape jarg1_);
  public final static native long MgShape_shapec(long jarg1, MgShape jarg1_);
  public final static native boolean MgShape_hasFillColor(long jarg1, MgShape jarg1_);
  public final static native boolean MgShape_draw(long jarg1, MgShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgShape_save(long jarg1, MgShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgShape_load(long jarg1, MgShape jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgShape_getID(long jarg1, MgShape jarg1_);
  public final static native long MgShape_getParent(long jarg1, MgShape jarg1_);
  public final static native void MgShape_setParent(long jarg1, MgShape jarg1_, long jarg2, MgShapes jarg2_, int jarg3);
  public final static native int MgShape_getTag(long jarg1, MgShape jarg1_);
  public final static native void MgShape_setTag(long jarg1, MgShape jarg1_, int jarg2);
  public final static native void MgShape_copy(long jarg1, MgShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgShape_equals(long jarg1, MgShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgShape_isKindOf(long jarg1, MgShape jarg1_, int jarg2);
  public final static native void MgHitResult_nearpt_set(long jarg1, MgHitResult jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgHitResult_nearpt_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_segment_set(long jarg1, MgHitResult jarg1_, int jarg2);
  public final static native int MgHitResult_segment_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_inside_set(long jarg1, MgHitResult jarg1_, boolean jarg2);
  public final static native boolean MgHitResult_inside_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_dist_set(long jarg1, MgHitResult jarg1_, float jarg2);
  public final static native float MgHitResult_dist_get(long jarg1, MgHitResult jarg1_);
  public final static native long new_MgHitResult();
  public final static native void delete_MgHitResult(long jarg1);
  public final static native void delete_MgBaseShape(long jarg1);
  public final static native int MgBaseShape_Type();
  public final static native long MgBaseShape_minTol();
  public final static native long MgBaseShape_cloneShape(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_setOwner(long jarg1, MgBaseShape jarg1_, long jarg2, MgShape jarg2_);
  public final static native long MgBaseShape_getExtent(long jarg1, MgBaseShape jarg1_);
  public final static native int MgBaseShape_getChangeCount(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_resetChangeCount(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_afterChanged(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_update(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_transform(long jarg1, MgBaseShape jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgBaseShape_clear(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_clearCachedData(long jarg1, MgBaseShape jarg1_);
  public final static native int MgBaseShape_getPointCount(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_getPoint(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_setPoint(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgBaseShape_isClosed(long jarg1, MgBaseShape jarg1_);
  public final static native boolean MgBaseShape_isCurve(long jarg1, MgBaseShape jarg1_);
  public final static native float MgBaseShape_hitTest(long jarg1, MgBaseShape jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native float MgBaseShape_hitTest2(long jarg1, MgBaseShape jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean MgBaseShape_hitTestBox(long jarg1, MgBaseShape jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgBaseShape_draw(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgBaseShape_save(long jarg1, MgBaseShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgBaseShape_load(long jarg1, MgBaseShape jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgBaseShape_getHandleCount(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_getHandlePoint(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native boolean MgBaseShape_setHandlePoint(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgBaseShape_isHandleFixed(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native int MgBaseShape_getHandleType(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native boolean MgBaseShape_offset(long jarg1, MgBaseShape jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native boolean MgBaseShape_getFlag(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_setFlag(long jarg1, MgBaseShape jarg1_, int jarg2, boolean jarg3);
  public final static native void MgBaseShape_copy(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgBaseShape_equals(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgBaseShape_isKindOf(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_setExtent(long jarg1, MgBaseShape jarg1_, long jarg2, Box2d jarg2_);
  public final static native int MgShapes_Type();
  public final static native long MgShapes_cloneShapes(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_create__SWIG_0(long jarg1, MgObject jarg1_, int jarg2);
  public final static native long MgShapes_create__SWIG_1(long jarg1, MgObject jarg1_);
  public final static native long MgShapes_create__SWIG_2();
  public final static native long MgShapes_addShapeByType(long jarg1, MgShapes jarg1_, long jarg2, MgShapeFactory jarg2_, int jarg3);
  public final static native int MgShapes_getShapeCount(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_getHeadShape(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_getLastShape(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_findShape(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_findShapeByTag(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_findShapeByType(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_getExtent(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_hitTest(long jarg1, MgShapes jarg1_, long jarg2, Box2d jarg2_, long jarg3, MgHitResult jarg3_);
  public final static native int MgShapes_draw__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, GiGraphics jarg2_, long jarg3, GiContext jarg3_);
  public final static native int MgShapes_draw__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native int MgShapes_dyndraw(long jarg1, MgShapes jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgShapes_save__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_, int jarg3);
  public final static native boolean MgShapes_save__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgShapes_saveShape(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_, long jarg3, MgShape jarg3_, int jarg4);
  public final static native boolean MgShapes_load__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_, boolean jarg4);
  public final static native boolean MgShapes_load__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native void MgShapes_setNewShapeID(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native void MgShapes_clear(long jarg1, MgShapes jarg1_);
  public final static native void MgShapes_clearCachedData(long jarg1, MgShapes jarg1_);
  public final static native void MgShapes_copyShapes__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_, boolean jarg3);
  public final static native void MgShapes_copyShapes__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_);
  public final static native long MgShapes_addShape(long jarg1, MgShapes jarg1_, long jarg2, MgShape jarg2_);
  public final static native long MgShapes_removeShape__SWIG_0(long jarg1, MgShapes jarg1_, int jarg2, boolean jarg3);
  public final static native long MgShapes_removeShape__SWIG_1(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_moveTo(long jarg1, MgShapes jarg1_, int jarg2, long jarg3, MgShapes jarg3_);
  public final static native void MgShapes_moveAllShapesTo(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_);
  public final static native boolean MgShapes_bringToFront(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_getOwner(long jarg1, MgShapes jarg1_);
  public final static native int MgShapes_getIndex(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_fromHandle(int jarg1);
  public final static native int MgShapes_toHandle(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_clone(long jarg1, MgShapes jarg1_);
  public final static native void MgShapes_copy(long jarg1, MgShapes jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgShapes_release(long jarg1, MgShapes jarg1_);
  public final static native void MgShapes_addRef(long jarg1, MgShapes jarg1_);
  public final static native boolean MgShapes_equals(long jarg1, MgShapes jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgShapes_getType(long jarg1, MgShapes jarg1_);
  public final static native boolean MgShapes_isKindOf(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long new_MgShapeIterator(long jarg1, MgShapes jarg1_);
  public final static native void delete_MgShapeIterator(long jarg1);
  public final static native boolean MgShapeIterator_hasNext(long jarg1, MgShapeIterator jarg1_);
  public final static native long MgShapeIterator_getNext(long jarg1, MgShapeIterator jarg1_);
  public final static native int MgShapeDoc_Type();
  public final static native long MgShapeDoc_cloneDoc(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_copyShapes(long jarg1, MgShapeDoc jarg1_, long jarg2, MgShapeDoc jarg2_, boolean jarg3);
  public final static native long MgShapeDoc_createDoc();
  public final static native boolean MgShapeDoc_save(long jarg1, MgShapeDoc jarg1_, long jarg2, MgStorage jarg2_, int jarg3);
  public final static native boolean MgShapeDoc_saveAll(long jarg1, MgShapeDoc jarg1_, long jarg2, MgStorage jarg2_, long jarg3, GiTransform jarg3_);
  public final static native boolean MgShapeDoc_load(long jarg1, MgShapeDoc jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_, boolean jarg4);
  public final static native boolean MgShapeDoc_loadAll(long jarg1, MgShapeDoc jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_, long jarg4, GiTransform jarg4_);
  public final static native void MgShapeDoc_clear(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_clearCachedData(long jarg1, MgShapeDoc jarg1_);
  public final static native int MgShapeDoc_draw(long jarg1, MgShapeDoc jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native long MgShapeDoc_getExtent(long jarg1, MgShapeDoc jarg1_);
  public final static native int MgShapeDoc_getShapeCount(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_getCurrentShapes(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_setCurrentShapes(long jarg1, MgShapeDoc jarg1_, long jarg2, MgShapes jarg2_);
  public final static native long MgShapeDoc_getCurrentLayer(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_switchLayer(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native int MgShapeDoc_getLayerCount(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_context(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_modelTransform(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_getPageRectW(long jarg1, MgShapeDoc jarg1_);
  public final static native float MgShapeDoc_getViewScale(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_setPageRectW(long jarg1, MgShapeDoc jarg1_, long jarg2, Box2d jarg2_, float jarg3);
  public final static native int MgShapeDoc_getChangeCount(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_isReadOnly(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_setReadOnly(long jarg1, MgShapeDoc jarg1_, boolean jarg2);
  public final static native long MgShapeDoc_fromHandle(int jarg1);
  public final static native int MgShapeDoc_toHandle(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_clone(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_copy(long jarg1, MgShapeDoc jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgShapeDoc_release(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_addRef(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_equals(long jarg1, MgShapeDoc jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgShapeDoc_getType(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_isKindOf(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native long MgShapeFactory_createShape(long jarg1, MgShapeFactory jarg1_, int jarg2);
  public final static native void delete_MgShapeFactory(long jarg1);
  public final static native int MgLayer_Type();
  public final static native long MgLayer_cloneLayer(long jarg1, MgLayer jarg1_);
  public final static native long MgLayer_create(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native long MgLayer_doc(long jarg1, MgLayer jarg1_);
  public final static native boolean MgLayer_isHided(long jarg1, MgLayer jarg1_);
  public final static native void MgLayer_setHided(long jarg1, MgLayer jarg1_, boolean jarg2);
  public final static native boolean MgLayer_isLocked(long jarg1, MgLayer jarg1_);
  public final static native void MgLayer_setLocked(long jarg1, MgLayer jarg1_, boolean jarg2);
  public final static native long MgLayer_clone(long jarg1, MgLayer jarg1_);
  public final static native void MgLayer_copy(long jarg1, MgLayer jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgLayer_release(long jarg1, MgLayer jarg1_);
  public final static native boolean MgLayer_equals(long jarg1, MgLayer jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgLayer_getType(long jarg1, MgLayer jarg1_);
  public final static native boolean MgLayer_isKindOf(long jarg1, MgLayer jarg1_, int jarg2);
  public final static native boolean MgStorage_readNode(long jarg1, MgStorage jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native boolean MgStorage_writeNode(long jarg1, MgStorage jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native boolean MgStorage_readBool(long jarg1, MgStorage jarg1_, String jarg2, boolean jarg3);
  public final static native float MgStorage_readFloat(long jarg1, MgStorage jarg1_, String jarg2, float jarg3);
  public final static native void MgStorage_writeBool(long jarg1, MgStorage jarg1_, String jarg2, boolean jarg3);
  public final static native void MgStorage_writeFloat(long jarg1, MgStorage jarg1_, String jarg2, float jarg3);
  public final static native void MgStorage_writeString(long jarg1, MgStorage jarg1_, String jarg2, String jarg3);
  public final static native int MgStorage_readInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native void MgStorage_writeInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native void MgStorage_writeUInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native boolean MgStorage_setError(long jarg1, MgStorage jarg1_, String jarg2);
  public final static native void delete_MgStorage(long jarg1);
  public final static native void MgBasicShapes_registerShapes(long jarg1, MgShapeFactory jarg1_);
  public final static native long new_MgBasicShapes();
  public final static native void delete_MgBasicShapes(long jarg1);
  public final static native int MgPlayShapes_ADD_get();
  public final static native int MgPlayShapes_EDIT_get();
  public final static native int MgPlayShapes_DEL_get();
  public final static native int MgPlayShapes_STATIC_CHANGED_get();
  public final static native int MgPlayShapes_DYNAMIC_CHANGED_get();
  public final static native int MgPlayShapes_FRAME_CHANGED_get();
  public final static native int MgPlayShapes_TICKMASK_get();
  public final static native long new_MgPlayShapes(String jarg1, long jarg2, GiTransform jarg2_);
  public final static native void delete_MgPlayShapes(long jarg1);
  public final static native boolean MgPlayShapes_loadFirstFile(long jarg1, MgPlayShapes jarg1_);
  public final static native int MgPlayShapes_loadNextFile(long jarg1, MgPlayShapes jarg1_, int jarg2);
  public final static native void MgPlayShapes_copyXformTo(long jarg1, MgPlayShapes jarg1_, long jarg2, GiTransform jarg2_);
  public final static native long MgPlayShapes_pickFrontDoc(long jarg1, MgPlayShapes jarg1_);
  public final static native long MgPlayShapes_pickDynShapes(long jarg1, MgPlayShapes jarg1_);
  public final static native long MgShape_SWIGUpcast(long jarg1);
  public final static native long MgBaseShape_SWIGUpcast(long jarg1);
  public final static native long MgShapes_SWIGUpcast(long jarg1);
  public final static native long MgShapeDoc_SWIGUpcast(long jarg1);
  public final static native long MgLayer_SWIGUpcast(long jarg1);
}
